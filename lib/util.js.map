{"version":3,"sources":["../src/util.js"],"names":[],"mappings":";;;;;QASgB,e,GAAA,e;QAkBA,gB,GAAA,gB;QAoBA,qB,GAAA,qB;QAaA,e,GAAA,e;QAaA,Y,GAAA,Y;QAgBA,U,GAAA,U;;AAzFhB;;;;AACA;;AACA;;;;AACA;;AACA;;;;AAEA,IAAM,YAAY,mBAAE,SAAF,cAAlB;AACA,IAAM,QAAQ,mBAAE,SAAF,gBAAd;;AAEO,SAAS,eAAT,CAA0B,IAA1B,EAAgC,QAAhC,EAA0C;AAC/C,SAAO,uBAAM,UAAC,OAAD,EAAU,MAAV,EAAqB;AAChC,kBAAK,IAAL,EAAW,UAAC,GAAD,EAAM,IAAN,EAAe;AACxB,UAAI,GAAJ,EAAS,OAAO,OAAO,GAAP,CAAP;AACT,UAAI,CAAC,KAAK,WAAL,EAAL,EAAyB,OAAO,QAAP;AACzB;AACD,KAJD;AAKD,GANM,EAON,OAPM,CAOE,QAPF,CAAP;AAQD;;AAED;;;;;;;AAOO,SAAS,gBAAT,CAA2B,IAA3B,EAAiC,MAAjC,EAAyC,QAAzC,EAAmD;AACxD,SAAO,uBAAM,UAAC,OAAD,EAAU,MAAV,EAAqB;AAChC,oBAAgB,IAAhB,EAAsB,MAAtB,EAA8B,UAAU,GAAV,EAAe,GAAf,EAAoB;AAChD,UAAI,GAAJ,EAAS,OAAO,OAAO,GAAP,CAAP;AACT,UAAI,GAAJ,EAAS,OAAO,QAAQ,GAAR,CAAP;;AAET,4BAAsB,IAAtB,EAA4B,UAAU,GAAV,EAAe,GAAf,EAAoB;AAC9C,YAAI,GAAJ,EAAS,OAAO,OAAO,GAAP,CAAP;AACT,gBAAQ,GAAR;AACD,OAHD;AAID,KARD;AASD,GAVM,EAWN,OAXM,CAWE,QAXF,CAAP;AAYD;;AAED;;;;;AAKO,SAAS,qBAAT,CAAgC,YAAhC,EAA8C,IAA9C,EAAoD;AACzD,gBAAK,YAAL,EAAmB,SAAS,wBAAT,CAAmC,GAAnC,EAAwC;AACzD,QAAI,GAAJ,EAAS,OAAO,KAAK,GAAL,CAAP;AACT,SAAK,IAAL,EAAW,YAAX;AACD,GAHD;AAID;;AAED;;;;;;AAMO,SAAS,eAAT,CAA0B,YAA1B,EAAwC,MAAxC,EAAgD,IAAhD,EAAsD;AAC3D,MAAI,CAAC,MAAD,IAAY,WAAW,OAA3B,EAAqC,OAAO,MAAP;;AAErC,MAAI,IAAI,gBAAK,YAAL,EAAmB,MAAnB,CAAR;AACA,gBAAK,CAAL,EAAQ,SAAS,wBAAT,CAAmC,GAAnC,EAAwC;AAC9C,QAAI,GAAJ,EAAS;AACP,UAAI,IAAI,IAAJ,KAAa,QAAjB,EAA2B,OAAO,MAAP,CADpB,CACkC;AACzC,aAAO,KAAK,GAAL,CAAP,CAFO,CAEU;AAClB;AACD,SAAK,IAAL,EAAW,CAAX;AACD,GAND;AAOD;;AAEM,SAAS,YAAT,CAAuB,IAAvB,EAA6B,IAA7B,EAAmC;AACxC,SAAO,MAAS,IAAT,UAAkB,IAAlB,SACN,IADM,CACD,UAAC,KAAD,EAAW;AACf,QAAI,CAAC,MAAM,MAAX,EAAmB,OAAO,IAAP;;AAEnB,WAAO,UAAU,MAAM,CAAN,CAAV,EAAoB,MAApB,EACN,IADM,CACD,UAAC,OAAD,EAAa;AACjB,UAAI,CAAC,QAAQ,MAAb,EAAqB,OAAO,IAAP;AACrB,aAAO;AACL,kBAAU,MAAM,CAAN,CADL;AAEL,iBAAS;AAFJ,OAAP;AAID,KAPM,CAAP;AAQD,GAZM,CAAP;AAaD;;AAEM,SAAS,UAAT,CAAqB,IAArB,EAA2B,OAA3B,EAAoC;AACzC,MAAI,CAAC,IAAL,EAAW,OAAO,mBAAE,OAAF,CAAU,IAAV,CAAP;AACX,SAAO,6BAAO,IAAP,EAAa,OAAb,CAAP;AACD","file":"util.js","sourcesContent":["import P from 'bluebird'\nimport {readFile, stat} from 'fs'\nimport glob from 'glob'\nimport {render} from './template-manager'\nimport {join} from 'path'\n\nconst readFileP = P.promisify(readFile)\nconst globP = P.promisify(glob)\n\nexport function ensureDirectory (path, callback) {\n  return new P((resolve, reject) => {\n    stat(path, (err, stat) => {\n      if (err) return reject(err)\n      if (!stat.isDirectory()) return reject()\n      resolve()\n    })\n  })\n  .nodeify(callback)\n}\n\n/**\n * Return the localized email tempalte folder or default email template folder\n *\n * @param  {String}   locale locale or null for get email without locale\n * @param  {Function} cb     callback how run with: error, folder\n * @return {Object} promisse\n */\nexport function resolveTPLFolder (path, locale, callback) {\n  return new P((resolve, reject) => {\n    getLocalizedETF(path, locale, function (err, tpl) {\n      if (err) return reject(err)\n      if (tpl) return resolve(tpl)\n\n      getRootTemplateFolder(path, function (err, tpl) {\n        if (err) return reject(err)\n        resolve(tpl)\n      })\n    })\n  })\n  .nodeify(callback)\n}\n\n/**\n * Get email template folder, this is the default folder with out localizations\n *\n * @param  {Function} done callback run with error,folder\n */\nexport function getRootTemplateFolder (templatePath, done) {\n  stat(templatePath, function afterCheckIfFolderExists (err) {\n    if (err) return done(err)\n    done(null, templatePath)\n  })\n}\n\n/**\n * Get localized email template folder\n *\n * @param  {String}   locale\n * @param  {Function} done   callback run with error,folder\n */\nexport function getLocalizedETF (templatePath, locale, done) {\n  if (!locale || (locale === 'en-us')) return done()\n\n  var p = join(templatePath, locale)\n  stat(p, function afterCheckIfFolderExists (err) {\n    if (err) {\n      if (err.code === 'ENOENT') return done() // not found\n      return done(err) // unknow error\n    }\n    done(null, p)\n  })\n}\n\nexport function readContents (path, type) {\n  return globP(`${path}/*${type}.*`)\n  .then((files) => {\n    if (!files.length) return null\n\n    return readFileP(files[0], 'utf8')\n    .then((content) => {\n      if (!content.length) return null\n      return {\n        filename: files[0],\n        content: content\n      }\n    })\n  })\n}\n\nexport function renderFile (file, options) {\n  if (!file) return P.resolve(null)\n  return render(file, options)\n}\n\n"]}